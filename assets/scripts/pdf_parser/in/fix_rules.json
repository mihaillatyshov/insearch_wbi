{
    "code_prefix": [
        { "type": "simple", "index": [3], "value": "MGR" },
        { "type": "simple", "index": [4], "value": "MIR" },
        { "type": "simple", "index": [5], "value": "MFR" },
        { "type": "simple", "index": [6], "value": "MPR" },
        { "type": "simple", "index": [7], "value": "MQR" },
        { "type": "simple", "index": [8], "value": "MUR" },
        { "type": "simple", "index": [9], "value": "MTR" },
        { "type": "simple", "index": [10, 11], "value": "MMR" }
    ],
    "code_replace_rules_sets": {
        "eng": { "O": "0", "o": "0", "&": "", "Z": "7", "S": "5", "T": "7", "G": "6", "l": "1" },
        "rus": { "О": "0", "о": "0", "З": "3", "з": "3" },
        "eng_to_rus": { "М": "M", "В": "B", "С": "C", " ": "" }
    },
    "code_regex": [
        { "index": [3], "regex": "^(\\d)(B)(\\d+\\.\\d+)(L)(\\d\\d)$" },
        { "index": [4], "regex": "^(\\d)(B)(L)(\\d\\d)(A)(\\d\\d)$" },
        { "index": [5], "regex": "^(\\d)(B)(\\d+\\.\\d+)(L)(\\d\\d)$" },
        { "index": [6], "regex": "^(\\d+(?:\\.\\d+)?)(R)(\\d+\\.\\d+)(L)(\\d+)$" },
        { "index": [7], "regex": "^(\\d)(R)(\\d+\\.\\d+)(L)(\\d\\d)$" },
        { "index": [8], "regex": "^(\\d)(R)(\\d+\\.\\d+)(L)(\\d\\d)$" },
        { "index": [9], "regex": "^(\\d+)(R)(\\d+\\.\\d+)(L)(\\d+)$" },
        { "index": [10, 11], "regex": "^(\\d+(?:\\.\\d+)?)(R)(\\d+\\.\\d+)(L)(\\d+)$" }
    ]
}
